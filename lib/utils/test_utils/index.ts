import fs from 'fs';
import { fork } from 'child_process';

const testFilename = '.github.config-test.json';

/**
 * Forks the createJson script to write the test data or custom testData to the test json file
 * @param args optional args to pass to the child process
 * @returns true if the child process exits with code 0, otherwise the error generated by the
 * child process
 */
async function forkCreateJsonScript(args: string[] = []): Promise<boolean | Error> {
    return new Promise((resolve, reject) => {
        const cp = fork(`./scripts/createGitHubJson.mjs`,
            [...args],
            { env: { NODE_ENV: 'test' } }
        );

        cp.on('close', async () => {
            resolve(true);
        });

        cp.on('error', err => reject(err));
    });
}

/**
 * Will take the GIT_HUB_USERNAME and GIT_HUB_AUTH_TOKEN test environment variables and write them
 * to the test json file
 * @returns true if the child process exits with code 0, 
 * otherwise the error generated by the child process
 */
async function writeEnvDataToTestJson(): Promise<boolean | Error> {
    return forkCreateJsonScript(
        [
            `${process.env.GIT_HUB_USERNAME}`,
            `${process.env.NEXT_PUBLIC_GIT_HUB_ACCESS_TOKEN}`
        ]
    );
}

/**
 * Writes default test data to the test json file
 * @example
 * ```json
* {
*    "username":"GitHubUsername",
*    "authenticate":"GitHubAccessToken"
* }
* ```
 * @returns true if the child process exits with code 0, otherwise the error generated by the child process
 */
async function resetTestJson(): Promise<boolean | Error> {
    return forkCreateJsonScript();
}

/**
 * Pass stringified json to be written to the file
 * Used to write missing values for tests as the createGitHubJson script will
 * assign GitHubUsername and GitHubAuth to the username and auth token respectively
 * @param jsonToWrite Json to write to the test json file
 */
function manuallyWriteTestJson(jsonToWrite: string): Promise<boolean | Error> {
    try {
        // check if the file exists
        if (fs.existsSync(testFilename)) {
            fs.unlinkSync(testFilename);
        }
        // write an empty file
        fs.writeFileSync(testFilename, jsonToWrite);
        return Promise.resolve(true);
    } catch (err) {
        console.trace(err);
        return Promise.reject(err);
    }
}

/**
 * Creates an empty test json file
 */
function emptyTestJson(): Promise<boolean | Error> {
    return manuallyWriteTestJson('{}');
}

/**
 * Writes test data for the username only
 */
function writeUsernameTestJson(): Promise<boolean | Error> {
    return manuallyWriteTestJson('{"username": "GitHubUsername"}');
}

/**
 * Writes test data for the auth token only
 */
function writeAuthTestJson(): Promise<boolean | Error> {
    return manuallyWriteTestJson('{"authenticate": "GitHubAuth"}');
}

export { writeEnvDataToTestJson, resetTestJson, emptyTestJson, writeUsernameTestJson, writeAuthTestJson };


const defaultExport: {
    writeEnvDataToTestJson: () => Promise<boolean | Error>;
    resetTestJson: () => Promise<boolean | Error>;
    writeUsernameTestJson: () => Promise<boolean | Error>;
    writeAuthTestJson: () => Promise<boolean | Error>;
    emptyTestJson: () => Promise<boolean | Error>;
} = { writeEnvDataToTestJson, resetTestJson, emptyTestJson, writeUsernameTestJson, writeAuthTestJson };

/*istanbul ignore next*/
export default defaultExport;
